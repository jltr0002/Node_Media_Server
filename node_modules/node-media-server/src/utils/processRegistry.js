const ffmpegProcesses = new Map();

/**
 * Stores multiple processes (ffmpeg and shaka) using a unique key.
 *
 * @param {string} key - Unique identifier for the stream.
 * @param {object} processes - The ffmpeg and shaka processes { ffmpeg, shaka }.
 */
function addProcess(key, processes) {
  ffmpegProcesses.set(key, processes);
}

/**
 * Retrieves the processes for a given stream.
 *
 * @param {string} key - Unique identifier for the stream.
 * @returns {{ ffmpeg: ChildProcess, shaka: ChildProcess } | undefined}
 */
function getProcess(key) {
  return ffmpegProcesses.get(key);
}

/**
 * Removes the process entry from the registry.
 *
 * @param {string} key - Unique identifier for the stream.
 */
function removeProcess(key) {
  ffmpegProcesses.delete(key);
}

/**
 * Terminates both the ffmpeg and shaka process associated with the key, if they exist.
 *
 * @param {string} key - Unique identifier for the stream.
 */
function stopProcess(key) {
  const processes = ffmpegProcesses.get(key);
  if (processes) {
    if (processes.ffmpeg) {
      processes.ffmpeg.kill('SIGINT');
      console.log(`Terminated ffmpeg process for stream: ${key}`);
    }
    if (processes.shaka) {
      processes.shaka.kill('SIGINT');
      console.log(`Terminated shaka process for stream: ${key}`);
    }
    ffmpegProcesses.delete(key);
  }
}

module.exports = {
  addProcess,
  getProcess,
  removeProcess,
  stopProcess,
};
