const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const processRegistry = require('../utils/processRegistry.js');

/**
 * Starts the DASH conversion for the given stream.
 *
 * @param {object} streamInfo - Information about the stream (e.g., name, url).
 */
function handleLiveDashStream(streamInfo) {
  console.log(`Starting DASH conversion for stream: ${streamInfo.name}`);

  const outputDir = path.join(__dirname, '../../../../streams', streamInfo.name);
  console.log(outputDir);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  //const mpdPath = path.join(outputDir,`${streamInfo.name}.mpd`);
  const mpdFilename = `${streamInfo.name}.mpd`;

  // const ffmpegArgs = [
  //   '-i', streamInfo.url,
  //   '-c:v', 'copy',
  //   '-c:a', 'copy',
  //   '-f', 'dash',
  //   mpdFilename
  // ];
  const ffmpegArgs = [
    '-i', streamInfo.url,
    '-filter_complex', "[0:v]split=4[v0][v1][v2][v3]; [v1]scale=-2:720[v1out]; [v2]scale=-2:360[v2out]; [v3]scale=-2:160[v3out]",
    // Map audio first
    '-map', '0:a', '-c:a', 'aac', '-b:a', '128k',
    // Map video streams with explicit stream specifiers
    '-map', '[v0]', '-c:v:0', 'libx264', '-b:v:0', '3000k',
    '-map', '[v1out]', '-c:v:1', 'libx264', '-b:v:1', '1500k',
    '-map', '[v2out]', '-c:v:2', 'libx264', '-b:v:2', '800k',
    '-map', '[v3out]', '-c:v:3', 'libx264', '-b:v:3', '400k',
    // DASH muxer options without adaptation_sets
    '-f', 'dash',
    '-use_template', '1',
    '-use_timeline', '1',
    '-init_seg_name', 'init_$RepresentationID$.mp4',
    '-media_seg_name', 'chunk_$RepresentationID$_%03d$.m4s',
    'manifest.mpd'
  ];

  console.log('Running FFmpeg command: ffmpeg ' + ffmpegArgs.join(' '));

   // Set the working directory (cwd) to outputDir so all files will be created there.
   const ffmpegProcess = spawn('ffmpeg', ffmpegArgs, { cwd: outputDir });

  ffmpegProcess.stdout.on('data', (data) => {
    console.log(`FFmpeg stdout: ${data}`);
  });

  ffmpegProcess.stderr.on('data', (data) => {
    console.error(`FFmpeg stderr: ${data}`);
  });

  ffmpegProcess.on('close', (code) => {
    console.log(`FFmpeg process exited with code ${code}`);
    // Optionally, remove from registry once process ends
    processRegistry.removeProcess(streamInfo.name);
  });

  // Save the process in the registry using the stream name as key.
  processRegistry.addProcess(streamInfo.name, ffmpegProcess);
}

module.exports = {
  handleLiveDashStream,
};