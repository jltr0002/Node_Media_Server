// live_dash_handler.js  — FFmpeg-only, with automatic cleanup  (Windows OK)d
const { spawn }   = require('child_process');
const path        = require('path');
const fs          = require('fs/promises');
const processRegistry = require('../utils/processRegistry.js');

async function handleLiveDashStream (streamInfo) {
  const outDir = path.join(__dirname, '../../../../streams', streamInfo.name);
  await fs.mkdir(outDir, { recursive: true });
  console.log(`Starting DASH for ${streamInfo.name}`);

  const ffmpeg = spawn(
    'ffmpeg',
    buildFfmpegArgs(streamInfo.url, outDir, streamInfo.name),
    { cwd: outDir, stdio: ['ignore', 'inherit', 'inherit'] }
  );

  ffmpeg.on('error', err  => console.error('FFmpeg spawn error:', err));
  ffmpeg.on('close', async code => {
    console.log(`FFmpeg exited ${code}`);
    await cleanup(outDir);
  });

  processRegistry.addProcess(streamInfo.name, { ffmpeg, outDir });
}

/* --------------------- FFmpeg argument builder ---------------------- */
function buildFfmpegArgs (url, dir, name) {
  return [
    '-re', '-i', url,
    '-loglevel', 'warning',

    /* split + scale ---------------------------------------------------- */
    '-filter_complex',
      '[0:v]split=3[hi][mid][low];' +
      '[mid]scale=-2:480[mid_s];' +
      '[low]scale=-2:144[low_s]',

    /* 4 500 kbit/s ------------------------------------------------------ */
    '-map','[hi]','-c:v:0','libx264',
    '-b:v:0','4500k','-maxrate:v:0','4500k','-bufsize:v:0','9000k',

    /* 1 500 kbit/s ------------------------------------------------------ */
    '-map','[mid_s]','-c:v:1','libx264',
    '-b:v:1','1500k','-maxrate:v:1','1500k','-bufsize:v:1','3000k',

    /*   300 kbit/s ------------------------------------------------------ */
    '-map','[low_s]','-c:v:2','libx264',
    '-b:v:2','300k','-maxrate:v:2','300k','-bufsize:v:2','600k',

    /* audio ------------------------------------------------------------ */
    '-map','0:a','-c:a','aac',
    // NEW — explicit rate so DASH muxer is happy
    '-b:a','128k','-maxrate:a','128k','-bufsize:a','256k',

    /* DASH muxer ------------------------------------------------------- */
    '-f',        'dash',
    '-ldash',    '1',            // low-latency CMAF
    '-seg_duration','1',
    '-min_seg_duration','1000000', // 1 000 000 µs = 1 s
    '-write_prft','1',           // NEW — Producer-Reference-Time
    '-utc_timing_url','https://time.akamai.com/?iso', // or your own clock
    '-use_timeline','1',
    '-use_template','1',
    '-window_size','15',
    '-extra_window_size','5',
    '-init_seg_name','init-$RepresentationID$.m4s',
    '-media_seg_name','seg-$RepresentationID$-$Number$.m4s',
    '-adaptation_sets','id=0,streams=v id=1,streams=a',
    path.join(dir,`${name}.mpd`)
  ];
}


async function cleanup (dir) {
  try {
    await fs.rm(dir, { recursive: true, force: true });
    console.log(`Cleaned up stream files in ${dir}`);
  } catch (e) {
    console.error('Cleanup failed:', e.message);
  }
}

module.exports = { handleLiveDashStream };