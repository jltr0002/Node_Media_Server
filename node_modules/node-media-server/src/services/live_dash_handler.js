// live_dash_handler.js
const { spawn }  = require('child_process');
const path       = require('path');
const fs         = require('fs/promises');
const processRegistry = require('../utils/processRegistry.js');

/* --------------------------- public entry ---------------------------- */
async function handleLiveDashStream (streamInfo) {
  const outDir = path.join(__dirname, '../../../../streams', streamInfo.name);
  await fs.mkdir(outDir, { recursive: true });
  console.log(`Starting DASH for ${streamInfo.name}`);

  const ffmpeg = spawn('ffmpeg',
    buildFfmpegArgs(streamInfo.url, outDir, streamInfo.name),
    { cwd: outDir, stdio: ['ignore', 'inherit', 'inherit'] }
  );

  ffmpeg
    .on('error', err  => console.error('FFmpeg spawn error:', err))
    .on('close', async code => {
      console.log(`FFmpeg exited ${code}`);
      await cleanupStreamFiles(outDir);
    });

  // save both ffmpeg handle and its output directory
  processRegistry.addProcess(streamInfo.name, { ffmpeg, outDir });
}

/* ---------- FFmpeg argument builder ---------- */

function buildFfmpegArgs (inputUrl, dir, name) {
  return [
    '-re', '-i', inputUrl,
    '-loglevel', 'warning',

    /* make three video renditions --------------------------------------- */
    '-filter_complex',
      '[0:v]split=3[vhi][vmed][vlo];' +
      '[vmed]scale=-2:480[vmeds];' +
      '[vlo] scale=-2:144[vlows]',

    /* map order:           0    1      2        3 ----------------------- */
    '-map', '[vhi]',  '-c:v:0', 'libx264', '-b:v:0', '4500k', '-preset', 'veryfast',
    '-map', '[vmeds]','-c:v:1', 'libx264', '-b:v:1', '1500k', '-preset', 'veryfast',
    '-map', '[vlows]','-c:v:2', 'libx264', '-b:v:2',  '300k', '-preset', 'veryfast',

    /* single audio track ------------------------------------------------- */
    '-map', '0:a',    '-c:a:3', 'aac',     '-b:a:3',   '128k',

    /* DASH muxer --------------------------------------------------------- */
    '-f', 'dash',
    '-seg_duration',            '2',
    '-use_timeline',            '1',
    '-use_template',            '1',
    '-window_size',             '15',
    '-extra_window_size',       '5',
    '-init_seg_name',           'init-$RepresentationID$.m4s',
    '-media_seg_name',          'seg-$RepresentationID$-$Number$.m4s',
    // 3 video streams are #0-2, audio is #3
    '-adaptation_sets',         'id=0,streams=v id=1,streams=a',
    path.join(dir, `${name}.mpd`)
  ];
}

async function cleanupStreamFiles (dir) {
  try {
    await fs.rm(dir, { recursive: true, force: true });
    console.log(`Cleaned up stream files in ${dir}`);
  } catch (e) {
    console.error('Cleanup failed:', e.message);
  }
}

module.exports = { handleLiveDashStream };
