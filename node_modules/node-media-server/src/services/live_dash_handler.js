const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

/**
 * Starts the DASH conversion for the given stream.
 * Uses FFmpeg to take an RTMP stream and generate an MPD file with segments.
 *
 * @param {object} streamInfo - Information about the stream (e.g., name, URL, etc.).
 */
function handleLiveDashStream(streamInfo) {
  console.log(`Starting DASH conversion for stream: ${streamInfo.name}`);

  // Define the output directory and MPD file path
  const outputDir = path.join(__dirname, 'dash_output', streamInfo.name);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  const mpdPath = path.join(outputDir, `${streamInfo.name}.mpd`);

  // Example FFmpeg command to convert RTMP to DASH:
  // ffmpeg -i <url> -c:v copy -c:a copy -f dash <mpd_path>
  const ffmpegArgs = [
    '-i', streamInfo.url,  // Input URL (RTMP)
    '-c:v', 'copy',
    '-c:a', 'copy',
    '-f', 'dash',
    mpdPath
  ];

  console.log('Running FFmpeg command: ffmpeg ' + ffmpegArgs.join(' '));

  const ffmpegProcess = spawn('ffmpeg', ffmpegArgs);

  ffmpegProcess.stdout.on('data', (data) => {
    console.log(`FFmpeg stdout: ${data}`);
  });

  ffmpegProcess.stderr.on('data', (data) => {
    console.error(`FFmpeg stderr: ${data}`);
  });

  ffmpegProcess.on('close', (code) => {
    console.log(`FFmpeg process exited with code ${code}`);
  });

  // Optionally, store the process in streamInfo to allow later termination if needed.
  streamInfo.ffmpegProcess = ffmpegProcess;
}

module.exports = {
    handleLiveDashStream,
};
